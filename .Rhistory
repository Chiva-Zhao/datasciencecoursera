counties <- c("Atlantic", "Bergen", "Burlington", "Camden", "Cape","Cumberland", "Essex", "Gloucester", "Hudson", "Hunterdon","Mercer", + "Middlesex", "Monmouth", "Morris", "Ocean", "Passaic","Salem", "Somerset", "Sussex","Union", "Warren")
counties <- c("Atlantic", "Bergen", "Burlington", "Camden", "Cape","Cumberland", "Essex", "Gloucester", "Hudson", "Hunterdon","Mercer", "Middlesex", "Monmouth", "Morris", "Ocean", "Passaic","Salem", "Somerset", "Sussex","Union", "Warren")
plot(counties,areanj)
plot(areanj)
njc <- data.frame(counties,areanj)
View(njc)
njc <- njc[order(njc[,2]),]
d_median <- (nrow(njc)+1)/2
d_hinge <- (floor(d_median)+1)/2
d_eights <- (floor(d_hinge)+1)/2
d_median;d_hinge;d_eights
indices <- c(1:d_median,(d_median-1):1)
cbind(njc,indices)
library(LearnEDA)
install.packages('LearnEDA')
??galton
library("RSADBE", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
data("galton")
??resistant_line
rgalton <- resistant_line(galton$parent,galton$child,iterations=5)
library("ACSWR", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
library("ACSWR", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
rgalton <- resistant_line(galton$parent,galton$child,iterations=5)
plot(galton$parent,galton$child,xlab="Parent's Height",ylab="Child's Height")
curve(rgalton$coeffs[1]+rgalton$coeffs[2]*(x-rgalton$xCenter),add=TRUE)
curve(x)
rgalton$coeffs[1]+rgalton$coeffs[2]*(x-rgalton$xCenter)
expression(rgalton$coeffs[1]+rgalton$coeffs[2]*(x-rgalton$xCenter))
View(galton)
data(girder)
?girder
boxplot(girder[,2:5])
View(girder)
medpolish(girder)
?medpolish
girder[1:4]
girder[2:4]
girder[2:5]
medpolish(girder[2:5])
summary(girder[S1.1,])
summary(girder[S1.1])
summary(girder[,S1.1])
summary(girder[1,])
summary(girder)
girder[1,]
girder[1,c(2,)]
girder[1,c(2:5)]
g1<-girder[1,c(2:5)]
summary(g1)
gl1
as.list(g1)
summary(as.list(g1))
as.vector(g1)
str(g1)
as.data.frame.vector(1)
as.data.frame.vector(g1)
?lars
??lars
x1<-c(0.772     1.186  1.061   1.025)
x1<-c(0.772   ,  1.186 , 1.061  , 1.025)
median(x1)
x1<-x1-median(x1)
x1
grid()
girder
medpolish(girder)
medpolish(girder[2:5])
install.packages('prob','scatterplot3d','ConvergenceConcepts')
install.packages(c('prob','scatterplot3d','ConvergenceConcepts'))
install.packages(c("cluster", "nlme", "survival"))
tosscoin
?tosscoin
??tosscoin
library(prob)
tosscoin(1)
tosscoin(2)
tosscoin(4)
rolldie(1)
rolldie(2)
n <- 10:1000
p <- 0.4
for(i in 1:length(n)){
plot(0:n[i],dbinom(0:n[i],p=0.4,n[i]),
"h",xaxt="n",yaxt="n",xlab="x",ylab="PDF")
title("The de Moivre's Laplace Central Limit Theorem")
curve(dnorm(x,mean=n[i]*0.4,sd=sqrt(n[i]*0.4*0.6)),
from=0,to=n[i],add=TRUE)
}
alpha <- 0.5
n <- c(1,5,20,100,500,1000)
cutoff <- 1e-3
par(mfrow=c(2,3))
for(i in 1:6){
from <- qgamma(cutoff/2, n[i]*alpha)
to <- qgamma(cutoff/2, n[i]*alpha,lower.tail=FALSE)
if(i==1) from <- 0
if(i==1) to <- 6
curve(dgamma(x,n[i]*alpha),from=from,to=to,ylab="f(x)",
xlab="x",main=paste("n = ",n[i],sep=""))
curve(dnorm(x,mean=n[i]*alpha,sd=sqrt(n[i]*alpha)),col="red",
add=TRUE)
}
title("CLT for a Gamma Sum",outer=TRUE,line=-1)
install.packages(c('mvtnorm'))
n <- 20; p <- 0.35
par(mfrow=c(1,3))
plot(0:20,dbinom(0:n,n,p),xlab="x",ylab = "P(X=x)",main="A Binomial Distribution")
plot(0:20,pbinom(0:n,n,p),xlab="x",ylab=expression(P(X<=x)),main="Binomial Cumulative Distribution Function")
plot(seq(0,1,.1),qbinom(seq(0,1,.1),n,p),xlab="Quantiles",ylab="X",main="Quantiles of Binomial RV")
par(mfrow=c(1,3))
n <- 10;p <- 0.35 # Plotting the CDF
plot(0:10,pbinom(0:10,n,p),xlab="x-values", ylab=expression(P(X<=x)),main="Binomial Cumulative Distribution Function")
t <- seq(-1,1,0.1) # The MGF
mgf_binomial <- function(t,n,p) {(1-p+p*exp(t))^{n}}
plot(t,mgf_binomial(t,n,p),xlab="t",ylab=expression(M(t)),main="The Binomial MGF")
t <- seq(-10,10,0.01) # The Characteristic Function
cf_binomial <- function(t,n,p) {(1-p+p*exp(1i*t))^{n}}
scatterplot3d(t,Re(cf_binomial(t,n,p)),Im(cf_binomial(t,n,p)),
xlim=c(-11,11),ylim=c(-1,1), zlim=c(-1,1), xlab="t",ylab=
expression(paste("Real Part of ",phi(t))), zlab=
expression(paste("Complex Part of ",phi(t))),highlight.3d=TRUE,
col.axis="blue",col.grid="lightblue", pch=20,type="l",
main=expression(phi(t)))
library("scatterplot3d", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
scatterplot3d(t,Re(cf_binomial(t,n,p)),Im(cf_binomial(t,n,p)),
xlim=c(-11,11),ylim=c(-1,1), zlim=c(-1,1), xlab="t",ylab=
expression(paste("Real Part of ",phi(t))), zlab=
expression(paste("Complex Part of ",phi(t))),highlight.3d=TRUE,
col.axis="blue",col.grid="lightblue", pch=20,type="l",
main=expression(phi(t)))
p <- seq(0,1,0.02)
mu <- (1-p)/p
var <- (1-p)/p^(2)
par(mfrow=c(1,2))
plot(p,mu,xlab="Probability of Success",ylab="Mean","l",main="A: Mean of Geometric Distribution")
plot(p,var,xlab="Probability of Success",ylab="Variance","l",main="B: Variance of Geometric Distribution")
n <- 0:50
p <- seq(0.05,1,0.05)
plot(n,p[1]^{n},xlab="x",ylab="Tail Probabilities","l", col=1,xlim=c(0,20),main="C: Tail Probabilities of Geometric RV")
for(i in 2:20) lines(n,p[i]^{n},"l",col=i)
# Understanding the Tail Probabilities
m <- 1:50
r <- 5
p <- seq(0.05,1,0.05)
plot(m,pbeta(p[1],m,r),xlab="x",ylab="Tail Probabilities",
"l",col=1,xlim=c(0,50),ylim=c(0,1),main="D: Tail Probabilities of
Negative Binomial RV")
for(i in 2:20) lines(m,pbeta(p[i],m,r),col=i)
search()
searchpaths()
getwd()
objects()
??var
??VaR
??chicago
??installr
install.packages('installr')
require(installr)
updateR()
exit()
install.packages(c("cluster", "Matrix", "nlme", "survival"))
mean(c(1:20))
sd(c(1:20))
X1<-c(35, 40, 40, 42, 37, 45, 43, 37, 44, 42, 41, 39)
X2 <- c(60, 74, 64, 71, 72, 68, 78, 66, 70, 65, 73, 75)
plot(X1,X2)
hist(X1)
getwd()
rt<-read.table("data/exam0203.txt", head=TRUE);
rt
?lm
lm.sol<-lm(Weight~Height,data = rt)
summary(lm.sol)
plot(lm.sol)
plot(X1,X2)
source('E:/gitproject/datasciencecoursera/20160428.R')
summary(lm.sol)
load("MyWorkSpace.RData")
exit
quit
quit()
??mvstats
??mvstats
?packageName
packageName('mvstats ')
packageName('mvstats')
packageName(env.'mvstats')
packageName(env.mvstats)
exit()
quit()
??highcharter
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
assign("x", c(10.4, 5.6, 3.1, 6.4, 21.7))
赋值
c(10.4, 5.6, 3.1, 6.4, 21.7) -> x
y <- c(x, 0, x)
x <- c(-1, 0, 2); y <- c(3, 8, 2)
v <- 2*x + y + 1; v
x * y
x / y
x^2
y^x
exp(x)
sqrt(y);
sqrt(-2)
sqrt(-2i)
sqrt(-2+0i)
min(x)
max(x);
range(x)
which.min(x)
which.max(x)
sum(x)
sum(x);prod(x)
sum(x);prod(x);length(x)
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
median(x)
median(x);mean(x)
median(x);mean(x);var(x)
median(x);mean(x);var(x);sd(x)
median(x);mean(x);var(x);sd(x);sort(x)
order(x);
median(x);mean(x);var(x);sd(x);sort(x);order(x);sort.list(x);
2.312:6
4:7.6
seq(1,2,.2)
s2 <- seq(length=51, from=-5, by=.2)
s2
rep(2,3)
x <- c(1, 4, 6.25); x
s <- rep(x, times=3); s
x <- 1:7;
x <- 1:7;l <- x > 3;l
x <- 1:7;l <- x > 3;l;x[x>3]
z <- c(TRUE, FALSE, F, T)
all(c(1, 2, 3, 4, 5, 6, 7) > 3)
any(c(1, 2, 3, 4, 5, 6, 7) > 3)
z <- c(1:3, NA); z
ind <- is.na(z); ind
z[is.na(z)] <- 0; z
x<-c(0/1, 0/0, 1/0, NA); x
is.nan(x)
is.nan(x);is.finite(x)
is.nan(x);is.finite(x);is.infinite(x)
is.nan(x);is.finite(x);is.infinite(x);is.na(x)
x
(x)
is.na(x)
y <-c ("er", "sdf", "eir", "jk", "dim")
paste("My","Job")
labs<-paste("X", 1:6, sep = ""); labs
1000000/526
1000000/5266
189/30
paste(1:10)
paste(1:10);as.character(1:10);
paste("Today is", date())
paste(c(’a’, ’b’), collapse=’.’)
paste(c('a', 'b'), collapse=’.’)
paste(c('a', 'b'), collapse='.')
paste('a','b',sep = '.')
627*.15
x <- seq(-pi, pi, by=pi/10)
y <- sin(x)
z <- complex(re=x, im=y)
?complex
plot(z)
plot(z);lines(z)
Re(z)
Re(z);Im(Z)
Re(z);Im(z)
Mod(z)
Arg(z)
x <- c(1,4,7)
x[2]
x[2];(c(1, 3, 5) + 5)[2]
x[2] <- 125;x
x[c(1,3)] <- c(144, 169)
x[c(1,3)] <- c(144, 169);x
x <- c(1,4,7)
x <- c(1,4,7);x < 5
x <- c(1,4,7);x < 5;x[x<5]
z <- c(-1, 1:3, NA)
z <- c(-1, 1:3, NA);z[is.na(z)] <- 0
z <- c(-1, 1:3, NA);z[is.na(z)] <- 0;z
z <- c(-1, 1:3, NA);
z <- c(-1, 1:3, NA);y <- z[!is.na(z)];y
(z+1)[(!is.na(z)) & z>0] -> x
z+1
(z+1)[(!is.na(z)) & z>0] -> x;x
y <- numeric(length(x))
y[x<0] <- 1 - x[x<0];y[x>=0] <- 1 + x[x>=0]
v <- 10:20
v <- 10:20;v[c(1,3,5,9)]
v[1:5]
v[c(1,2,3,2,1)]
c("a","b","c")[rep(c(2,1,3), times=3)]
v[-(1:5)]
v
ages <- c(Li=33, Zhang=29, Liu=18)
str(ages)
ages
ages <- c(Li=33, Zhang=29, Liu=18)
ages <- c(Li=33, Zhang=29, Liu=18);ages["Zhang"]
fruit <- c(5, 10, 1, 20)
fruit <- c(5, 10, 1, 20);names(fruit) <- c("orange", "banana", "apple", "peach")
fruit
mode(c(1,3,5)>5)
z <- 0:9;
z <- 0:9;is.numeric(z)
z <- 0:9;is.numeric(z);is.character(z)
length(2:4)
length(2:4);length(z)
digits <- as.character(z); digits
d <- as.numeric(digits); d
x <- numeric()
x[3] <- 17;x
x[3] <- 17;x;x <- 1:3
x[3] <- 17;x;x <- 1:3;x
x[3] <- 17;x;x <- 1:3;x
x <- x[1:2]
x <- x[1:2];x
alpha <- 1:10;
alpha <- 1:10;alpha <- alpha[2 * 1:5];alpha
length(alpha) <- 3;alpha
x <- c(apple=2.5,orange=2.1); x
x <- c(apple=2.5,orange=2.1); x;attributes(x)
x$names
attr(x,"names")
attr(x,"names") <- c("apple","grapes"); x
attr(x,"type") <- "fruit"; x
x
attributes(x)
attributes(x)
attr(x,"names")
sex <- c("M","F","M","M", "F")
sexf <- factor(sex); sexf
sex.level <- levels(sexf); sex.level
sex.tab <- table(sexf); sex.tab
height <- c(174, 165, 180, 171, 160)
tapply(height, sex, mean)
gl(3,5)
gl(3,5);gl(3,1,15)
z<-1:12
z<-1:12;dim(z)<-c(3,4)
z
dim(z)
dim(z)<-12;z
X <- array(1:20,dim=c(4,5))
X <- array(1:20,dim=c(4,5));X
Z <- array(0,dim=c(3, 4, 2));Z
A<-matrix(1:15, nrow=3,ncol=5,byrow=TRUE);A
A<-matrix(1:15, nrow=3,byrow=TRUE);A<-matrix(1:15, ncol=5,byrow=TRUE)
A
a <- 1:24;
a <- 1:24;dim(a) <- c(2,3,4)
a <- 1:24;dim(a) <- c(2,3,4);a[2, 1, 2]
a
a[1, 2:3, 2:3]
a[1,]
a[1,,]
a[ , 2, ]
a[1,1, ]
a
a
a[1,,]
a
a[,2,]
a[1, 2:3, 2:3]
a[3:10]
str(a)
class(a)
b <- matrix(c(1,1,1,2,2,3,1,3,4,2,1,4), ncol=3, byrow=T)
b
a[b]
a[b];a[b] <- c(101,102,103,104)
B <- matrix(1:6, nrow=2); B
A <- matrix(1:6, nrow=2, byrow=T); A
C <- matrix(c(1,2,2,3,3,4), nrow=2); C
D <- 2*C+A/B; D
x1 <- c(100,200)
x1 <- c(100,200);x2 <- 1:6
x1 <- c(100,200);x2 <- 1:6;x1+x2
x3 <- matrix(1:6, nrow=3)
x3 <- matrix(1:6, nrow=3);x3
x3 <- matrix(1:6, nrow=3);x3;x1+x3
x2 <- 1:5;x1+x2
A<-matrix(1:6,nrow=2); A
A<-matrix(1:6,nrow=2); A;t(A)
det(matrix(1:4, ncol=2))
x <- 1:5; y <- 2*1:5;x %*% y
crossprod(x,y)
tcrossprod(x,y)
x %o% y;tcrossprod(x,y)
x %o% y;tcrossprod(x,y);outer(x,y)
A <- array(1:9,dim=(c(3,3)));A
B <- array(9:1,dim=(c(3,3)));B
C <- A * B; C
D <- A %*% B; D
x
x % * % A % * % x
x %*% A %*% x
x <- 1:5; y <- 2*1:5;x %*% y;crossprod(x,y);
v<-c(1,4,5);diag(v)
M<-array(1:9,dim=c(3,3));diag(M)
M<-array(1:9,dim=c(3,3));diag(M)
A <- t(array(c(1:8, 10),dim=c(3,3)))
A
b <- c(1,1,1)
x <- solve(A,b); x
B <- solve(A); B
A*B
A%*%B
A
B
A%*%G
A%*%B
ev <- eigen(Sm)
17220、5
17220/5
eigen
>eigen()
?eigen
eigen(cbind(c(1,-1), c(-1,1)))
cbind(c(1,-1), c(-1,1))
Sm<-crossprod(A,A)
ss
Sm
ev<-eigen(Sm); ev
17352/5
7804/6
Sm%*%ev$vectors
ev$values%*%ev$vectors
(Sm-ev$values)
(Sm-ev$values)%*%ev$vectors
Sm
Sm%*%ev$vectors
ev$values%*%ev$vectors
eigen(cbind(c(1,-1), c(-1,1)))
eigen(cbind(c(1,-1), c(-1,1)), symmetric = FALSE)
Sm*ev$vectors
ev$values*ev$vectors
Sm%*%ev$vectors
ev$values%*%ev$vectors
ev$values*ev$vectors
ev$values[1]
ev$values[1]*ev$vectors
Sm%*%ev$vectors
ev$values[2]*ev$vectors
ev$values[3]*ev$vectors
ev$values*ev$vectors
ev$values%*%ev$vectors
svdA<-svd(A); svdA
?svd
attach(svdA)
u %*% diag(d) %*% t(v)
u %*% diag(d) %*% t(svdA$v)
det(A)
x <- c(75, 64, 47.4, 66.9, 62.2, 62.2, 58.7, 63.5)
x <- c(75, 64, 47.4, 66.9, 62.2, 62.2, 58.7, 63.5)
sort(x)
sort(x,decreasing = T)
x.na <- c(75.0,64.0,47.4,NA,66.9,62.2,62.2,58.7,63.5)
sort(x.na)
sort(x.na);sort(x.na, na.last = TRUE)
sort(x.na, na.last = FALSE)
rank(x)
x
x <- c(75, 64, 47.4, 66.9, 62.2, 62.2, 58.7, 63.5)
median(x)
x.na <- c(75.0,64.0,47.4,NA,66.9,62.2,62.2,58.7,63.5);median(x)
x.na <- c(75.0,64.0,47.4,NA,66.9,62.2,62.2,58.7,63.5);median(x.na)
x.na <- c(75.0,64.0,47.4,NA,66.9,62.2,62.2,58.7,63.5);median(x.na);median(x,na.rm=F)
w <- c(75.0, 64.0, 47.4, 66.9, 62.2, 62.2, 58.7, 63.5,66.6, 64.0, 57.0, 69.0, 56.9, 50.0, 72.0)
quantile(w)
quantile(w);quantile(w, probs = seq(0, 1, 0.2))
var(w)
var(w);sd(w)
setwd("E:/gitproject/datasciencecoursera")
source('E:/gitproject/datasciencecoursera/unison.R')
source("unison.R")
unison(X)
X<-read.table("course.data")
unison(X)
x <- as.matrix(x)
t <- seq(-pi, pi, pi / 30)
m <- nrow(x)
x
View(X)
x <- as.matrix(X)
View(x)
t <- seq(-pi, pi, pi / 30)
m <- nrow(x)
n <- ncol(x)
c(m, length(t))
f <- array(0, c(m, length(t)))
f
f[1,]
str(f)
j in 2:n
2:n
2/2
2:n/2
source('E:/gitproject/datasciencecoursera/moment_fun.R')
x <- rbinom(100, 20, 0.7)
n <- length(x)
A1 <- mean(x)
M2 <- (n - 1) / n * var(x)
source("moment_fun.R")
source("Newtons.R")
p <- c(10, 0.5)
Newtons(moment_fun, p)
