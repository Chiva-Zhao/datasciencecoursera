detach("package:ACSWR", unload=TRUE)
try(data(package='ACSWR'))
data(memory)
library("ACSWR", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
data("memory")
str(memory)
lapply(memory,fivenum)
?mad
lapply(memory,mad)
lapply(memory,IQR)
?IQR
lapply(memory,quantile)
2.8150-1.8925
3.27-1.81
3.27-1.8150
3.27-1.8925
x1<-c((1, 1, 2, 2, 4, 6, 9))
x1<-c(1, 1, 2, 2, 4, 6, 9)
x1
median(x1)
?median
sum(x1)/length(x1)
length(x1)
sum(x1)
x2<-x1-2
x2
x2<-abs(x2)
x2
median(x2)
mad(x1)
x1
mad(c(1:9))
print(mad(c(1:9),     constant = 1)) ==
mad(c(1:8, 100), constant = 1)
lapply(memory,fnid)
fnid_pleasant <- fnid(memory$Pleasant.memory)
fnid_unpleasant <- fnid(memory$Unpleasant.memory)
btskew_pleasant <- (fnid_pleasant[3]-fnid_pleasant[2])/(fnid_pleasant[3]+fnid_pleasant[2])
btskew_unpleasant <- (fnid_unpleasant[3]-fnid_unpleasant[2])/(fnid_unpleasant[3]+fnid_unpleasant[2])
btskew_pleasant; btskew_unpleasant
x1
mad(x1)
a
B
median(B)
median(B-2.5)
B-2.5
mad(median(B-2.5))
??yd
try(data(package=ACSWR))
try(data(package='ACSWR'))
data(yb)
str(yb)
boxplot(yb)
title("A: Boxplot for Youden-Beale Data")
par(mfrow
)
par(mfrow)
par(mfrow=c(1,2))
mfrow
par(mfrow)
boxplot(yb,notch=TRUE)
title("B: Notched Boxplots Now")
par(mfrow=c(1,2))
boxplot(yb)
title("A: Boxplot for Youden-Beale Data")
boxplot(yb,notch=TRUE)
title("B: Notched Boxplots Now")
??morley
par(mfrow=c(1,2))
boxplot(Speed Expt, data=morley,xlab = "Experiment No.",ylab="Speed of light (km/s minus 299,000)")
boxplot(Speed~ Expt, data=morley,xlab = "Experiment No.",ylab="Speed of light (km/s minus 299,000)")
data("morley")
abline(h=792.458, lty=3)
boxplot(Speed~ Expt, data=morley,xlab = "Experiment No.",ylab="Speed of light (km/s minus 299,000)",notch=TRUE)
abline(h=792.458, lty=3)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
boxplot(memory)
title("A: Boxplot for Memory Recall")
boxplot(memory,notch=T)
par(mfrow=c(1,2))
boxplot(memory)
title("A: Boxplot for Memory Recall")
?InsectSprays
data("InsectSprays")
str(InsectSprays)
View(InsectSprays)
aggregate(InsectSprays$count,by=InsectSprays$spray,sum())
aggregate(InsectSprays$count,by=InsectSprays$spray,sum
)
InsectSprays$spray
list(InsectSprays$spray)
?list
aggregate(InsectSprays$count,by=list(InsectSprays$spray),sum)
?aggregate
list(InsectSprays$spray)
str(list(InsectSprays$spray))
InsectSprays$spray
str(InsectSprays$spray)
boxplot(count spray,data=InsectSprays,notch=TRUE)
boxplot(count~ spray,data=InsectSprays,notch=TRUE)
title('Boxplot for InsetSprays')
data(morley)
factor(morley$Expt)
View(morley)
morley$Expt <- factor(morley$Expt)
par(las=1, mar=c(5.1, 5.1, 2.1, 2.1))
boxplot(Speed ~ Expt, morley, xlab = "Experiment No.",
ylab="Speed of light (km/s minus 299,000)")
abline(h=792.458, col="red")
text(3,792.458,"true\nspeed")
dev.off()
data("sample")
View(sample)
?sample
?layout
layout(matrix(c(1,1,2,2,3,3,0,4,4,5,5,0), nrow=2, ncol=6,byrow=TRUE),respect=FALSE)
hist(sample[,1],main="Histogram of Sample 1",xlab="sample1", ylab="frequency")
hist(sample[,2],main="Histogram of Sample 2",xlab="sample2",ylab="frequency")
hist(sample[,3],main="Histogram of Sample 3",xlab="sample3",ylab="frequency")
hist(sample[,4],main="Histogram of Sample 4",xlab="sample4",ylab="frequency")
hist(sample[,5],main="Histogram of Sample 5",xlab="sample5",ylab="frequency")
length(hist$count)
diff(hist$break)
diff(hist$breaks)
?hist
hist.default()
nclass.Sturges()
nclass.Sturges(sample)
nclass.Sturges(sample$Sample_1)
nclass.Sturges(sample$Sample_2)
nclass.Sturges(sample$Sample_3)
nclass.Sturges(sample$Sample_4)
length(sample)
length(sample$Sample_1)
ceiling(log(100))
ceiling(log10(100))
ceiling(log2(100)+1)
log2(100)
log2(100)+1
data(galton)
?galton
??galton
grep('galton',try(data(package='memory')))
grep('galton',try(data(package='LearnEDA')))
grep('galton',try(data(package='e1071')))
grep('galton',try(data(package='sfsmisc')))
grep('galton',try(data(package='qcc')))
grep('galton',try(data(package='aplpack')))
grep('galton',try(data(package='RSADBE')))
try(data(package='RSADBE'))
install.packages('aplpack')
install.packages('RSADBE')
grep('galton',try(data(package='RSADBE')))
?galton
??galton
data(galton)
library("RSADBE", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
data(galton)
plot(galton)
par(mfrow=c(1,1))
plot(galton)
hist(galton)
hist(galton$parent,freq=FALSE,col="green",density=10,xlim=c(60,75), xlab="height",main="Histograms for AD5")
hist(galton$child,freq=F,col="red",add=TRUE,density=10,angle=-45)
legend(x=c(71,73),y=c(0.2,0.17),c("parent","child"),col=c("green","red"),pch="-")
?legend
legend(x=c(71,73),y=c(2,17),c("parent","child"),col=c("green","red"),pch="-")
legend(x=c(71,78),y=c(2,17),c("parent","child"),col=c("green","red"),pch="-")
View(galton)
?sfsmisc
??sfsmisc
library(sfsmisc)
?histBxp
par(mfrow=c(1,3))
histBxp(sample$Sample_1,col="blue",boxcol="blue",xlab="x")
data("sample")
histBxp(sample$Sample_1,col="blue",boxcol="blue",xlab="x")
histBxp(sample$Sample_2,col="grey",boxcol="grey",xlab="x")
histBxp(sample$Sample_3,col="brown",boxcol="brown",xlab="x")
title("Boxplot and Histogram Complementing",outer=TRUE,line=-1)
?
chest
data(chest)
View(chest)
str(chest)
names(chest)
militiamen <- rep(Chest,Count)
militiamen <- rep(chest,Count)
bins <- seq(33,48)
bins
bin.mids <- (bins[-1]+bins[-length(bins)])/2
bins[-1]
bins[-length(bins)
]
bin.mids
militiamen <- rep(chest$Chest,chest$Count)
length(militiamen)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
> h <- hist(militiamen, breaks = bins, xlab= "Chest Measurements (Inches)", main= "A: Histogram for the Militiamen")
par(mfrow=c(1,2))
> h <- hist(militiamen, breaks = bins, xlab= "Chest Measurements (Inches)", main= "A: Histogram for the Militiamen")
h <- hist(militiamen, breaks = bins, xlab= "Chest Measurements
(Inches)", main= "A: Histogram for the Militiamen")
h$counts <- sqrt(h$counts)
h
plot(h,xlab= "Chest Measurements (Inches)",ylab= "ROOT FREQUENCY",
+ main= "B: Rootogram for the Militiamen")
plot(h,xlab= "Chest Measurements (Inches)",ylab= "ROOT FREQUENCY",main= "B: Rootogram for the Militiamen")
par(mfrow=c(1,2))
> h <- hist(militiamen, breaks = bins, xlab= "Chest Measurements (Inches)", main= "A:Histogram for the Militiamen")
h <- hist(militiamen, breaks = bins, xlab= "Chest Measurements (Inches)", main= "A: Histogram for the Militiamen")
h$counts <- sqrt(h$counts)
plot(h,xlab= "Chest Measurements (Inches)",ylab= "ROOT FREQUENCY",main= "B: Rootogram for the Militiamen")
h
str(h)
?qcc
??qcc
?pareto.chart
??pareto.chart
library("qcc", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
?pareto.chart
defect <- c(80, 27, 66, 94, 33)
names(defect) <- c("price code", "schedule date", "supplier code", "contact num.", "part num.")
defect
pareto.chart(defect, ylab = "Error frequency")
pareto.chart(defect, ylab = "Error frequency", xlab = "Error causes", las=1)
pareto.chart(defect, ylab = "Error frequency", col=rainbow(length(defect)))
pareto.chart(defect, cumperc = seq(0, 100, by = 5), ylab2 = "A finer tickmarks grid")
freq <- c(14,2,1,2,3,8,1)
names(freq) <- c("Contamination","Corrosion","Doping","Metallization", "Miscellaneous", "Oxide Effect","Silicon Effect")
freq
pareto(freq)
pareto.chart(freq)
sleep
sleep$extra[sleep$group==1]
sort( sleep$extra[sleep$group==1])
sort(sleep$extra[sleep$group==2])
stem(sleep$extra[sleep$group==1],scale=2)
stem(sleep$extra[sleep$group==2],scale=2)
median(sleep$extra[sleep$group==1])
median(sleep$extra[sleep$group==2])
?median
median(1:4)
1:4
mean(1:4)
mean(1:5)
median(1:5)
c(1,2,4,5,7,8,9)
mean(c(1,2,4,5,7,8,9))
median(c(1,2,4,5,7,8,9))
ji4 <- jitter(iris[,4])
quantile(ji4)
fivenum(ji4)
areanj <- c(569, 234, 819, 221, 267, 500, 130, 329, 47, 423, 228,312, 476, 468, 642, 192, 365, 307, 527, 103, 362)
counties <- c("Atlantic", "Bergen", "Burlington", "Camden", "Cape",
+ "Cumberland", "Essex", "Gloucester", "Hudson", "Hunterdon",
"Mercer", + "Middlesex", "Monmouth", "Morris", "Ocean", "Passaic",
"Salem", "Somerset", "Sussex",
+ "Union", "Warren")
counties <- c("Atlantic", "Bergen", "Burlington", "Camden", "Cape","Cumberland", "Essex", "Gloucester", "Hudson", "Hunterdon","Mercer", + "Middlesex", "Monmouth", "Morris", "Ocean", "Passaic","Salem", "Somerset", "Sussex","Union", "Warren")
counties <- c("Atlantic", "Bergen", "Burlington", "Camden", "Cape","Cumberland", "Essex", "Gloucester", "Hudson", "Hunterdon","Mercer", "Middlesex", "Monmouth", "Morris", "Ocean", "Passaic","Salem", "Somerset", "Sussex","Union", "Warren")
plot(counties,areanj)
plot(areanj)
njc <- data.frame(counties,areanj)
View(njc)
njc <- njc[order(njc[,2]),]
d_median <- (nrow(njc)+1)/2
d_hinge <- (floor(d_median)+1)/2
d_eights <- (floor(d_hinge)+1)/2
d_median;d_hinge;d_eights
indices <- c(1:d_median,(d_median-1):1)
cbind(njc,indices)
library(LearnEDA)
install.packages('LearnEDA')
??galton
library("RSADBE", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
data("galton")
??resistant_line
rgalton <- resistant_line(galton$parent,galton$child,iterations=5)
library("ACSWR", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
library("ACSWR", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
rgalton <- resistant_line(galton$parent,galton$child,iterations=5)
plot(galton$parent,galton$child,xlab="Parent's Height",ylab="Child's Height")
curve(rgalton$coeffs[1]+rgalton$coeffs[2]*(x-rgalton$xCenter),add=TRUE)
curve(x)
rgalton$coeffs[1]+rgalton$coeffs[2]*(x-rgalton$xCenter)
expression(rgalton$coeffs[1]+rgalton$coeffs[2]*(x-rgalton$xCenter))
View(galton)
data(girder)
?girder
boxplot(girder[,2:5])
View(girder)
medpolish(girder)
?medpolish
girder[1:4]
girder[2:4]
girder[2:5]
medpolish(girder[2:5])
summary(girder[S1.1,])
summary(girder[S1.1])
summary(girder[,S1.1])
summary(girder[1,])
summary(girder)
girder[1,]
girder[1,c(2,)]
girder[1,c(2:5)]
g1<-girder[1,c(2:5)]
summary(g1)
gl1
as.list(g1)
summary(as.list(g1))
as.vector(g1)
str(g1)
as.data.frame.vector(1)
as.data.frame.vector(g1)
?lars
??lars
x1<-c(0.772     1.186  1.061   1.025)
x1<-c(0.772   ,  1.186 , 1.061  , 1.025)
median(x1)
x1<-x1-median(x1)
x1
grid()
girder
medpolish(girder)
medpolish(girder[2:5])
install.packages('prob','scatterplot3d','ConvergenceConcepts')
install.packages(c('prob','scatterplot3d','ConvergenceConcepts'))
install.packages(c("cluster", "nlme", "survival"))
tosscoin
?tosscoin
??tosscoin
library(prob)
tosscoin(1)
tosscoin(2)
tosscoin(4)
rolldie(1)
rolldie(2)
sample()
?sample
library("ACSWR", lib.loc="d:/Program Files/R/R-3.2.4revised/library")
m<-cbind(c(1:11),c(2:12))
m
m[1,]
m[,1]
if(m[,1]>10) m[,1]<-0
m[,1]>10
m[m[,1]>10]
m[m[,1]>10]<-0
m
m[,m[,1]>10]<-0
str(m)
?plyr
??plyr
library(plyr)
install.packages('plyr')
install.packages('plyr')
data(cloud)
?cloud
data<-data.frame(1,2,3);
View(data)
x <- read.table(text = "ID    n    m
156   12   15
187   14   16
297   41   48
89    42   49
79    51   79", header= TRUE)
x
distfunc <- function(data,n,m){
X1<-10;
X2<-20;
X3<-c(n:m);
data<-rbind(data,data.frame(X1,X2,X3));
return(data);
}
data
data<-distfunc(data,x$n, x$m)
distfunc <- function(data,n,m){
X1<-10;
X2<-20;
X3<-c(n,m);
data<-rbind(data,data.frame(X1,X2,X3));
return(data);
}
data<-distfunc(data,x$n, x$m)
data
Urn <- rep(c("Red","Green","Blue"),times=c(5,3,8))
?urnsample
??urnsample
require(prob)
urnsamples(urn,1)
urnsamples(Urn,1)
urnsamples(Urn,2,replace = T)
urnsamples(Urn,2,replace = F)
cards()
cds<-cards()
class(cds)
cbind(cards()[1:13,],cards()[14:26,],cards()[27:39,], cards()
[40:52,])
cards(jokers=T)[53:54,]
S <- cards()
A <- S[8:28,]; B <- S[22:35,]
View(A)
View(S)
View(B)
union(A,B)
View(S)
intersect(A,B)
setdiff(S,A)
Omega <- tosscoin(times=1)
View(Omega)
sum(Omega=="H")/nrow(Omega)
Omega2 <- tosscoin(times=2)
View(Omega2)
sum(rowSums(Omega2='H'))/nrow(Omega2)
sum(rowSums(Omega2='H')>0)/nrow(Omega2)
rowSums(Omega2='H')
sum(rowSums(Omega2=='H')>0)/nrow(Omega2)
rowSums(Omega2=='H')
rowSums(Omega2=='H')>0
sum(rowSums(Omega2=='H')>0)
Omega10 <- tosscoin(times=10)
sum((rowSums(Omega10==“H”)>=4) & (rowSums(Omega10==“H”)<=7))/nrow(Omega10)
sum((rowSums(Omega10==“H”)>=4) & (rowSums(Omega10==“H”)<=7))/nrow(Omega10)
sum((rowSums(Omega10==“H”)>=4) & (rowSums(Omega10==“H”)<=7))/
nrow(Omega10)
sum((rowSums(Omega10==“H”)>=4))/nrow(Omega10)
sum((rowSums(Omega10=="H")>=4))/nrow(Omega10)
sum((rowSums(Omega10=="H")<=7))/nrow(Omega10)
sum((rowSums(Omega10=="H")>=4) & (rowSums(Omega10=="H")<=7))/nrow(Omega10)
Omega_Roll1 <- rolldie(times=1)
View(Omega_Roll1)
sum(Omega_Roll1%%2==1)/nrow(Omega_Roll1)
data<-data[-1,]
setwd("E:/gitproject/datasciencecoursera")
getwd()
S_Die <- rolldie(times=2)
table(rowSums(S_Die))/nrow(S_Die)
rowSums(S_Die))/nrow(S_Die
rowSums(S_Die))/nrow(S_Die)
table(rowSums(S_Die))
View(S_Die)
class(table(rowSums(S_Die)))
names(table(rowSums(S_Die)))
cnames
names()
?match
library(help='prob')
fullyears <- 1601:2000
fullyears <- 1601:2000
months <- 1:12
for(i in 1:length(fullyears)) {
for(j in 1:12){
testthirteenth <- c(testthirteenth,weekdays(as.Date(paste(
fullyears[i],"/", months[j],"/13",sep=""),"%Y/%m/%d")))
}
}
testthirteenth <- NULL
for(i in 1:length(fullyears)) {
for(j in 1:12){
testthirteenth <- c(testthirteenth,weekdays(as.Date(paste(
fullyears[i],"/", months[j],"/13",sep=""),"%Y/%m/%d")))
}
}
?weekdays
weekdays(.leap.seconds)
months(.leap.seconds)
quarters(.leap.seconds)
julian(Sys.Date(), -2440588)
as.Date(paste(2016,"/", 4,"/13",sep=""),"%Y/%m/%d")
paste('a','b','dddd')
paste('a','b','dddd',sep = "")
as.Date("2016-04-13")
str(as.Date("2016-04-13"))
table(testthirteenth)
sum(table(testthirteenth))
table(testthirteenth)[5]
table(testthirteenth)[6]/4800
sapply(1:12,factorial)
prod(10:6)
10:6
10^5
prod(10:6)/10%6
prod(10:6)/10^5
data(e800)
??e800
e800<-2.718281828459045235360287471352662497757247093699959574966
967627724076630353547594571382178525166427427466391932003059
921817413596629043572900334295260595630738132328627943490763
233829880753195251019011573834187930702154089149934884167509
244761460668082264800168477411853742345442437107539077744992
069551702761838606261331384583000752044933826560297606737113
200709328709127443747047230696977209310141692836819025515108
657463772111252389784425056953696770785449969967946864454905
987931636889230098793127736178215424999229576351482208269895
193668033182528869398496465105820939239829488793320362509443
117301238197068416140397019837679320683282376464804295311802
328782509819455815301756717361332069811250996181881593041690
351598888519345807273866738589422879228499892086805825749
e800<-"2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921817413596629043572900334295260595630738132328627943490763233829880753195251019011573834187930702154089149934884167509244761460668082264800168477411853742345442437107539077744992069551702761838606261331384583000752044933826560297606737113200709328709127443747047230696977209310141692836819025515108657463772111252389784425056953696770785449969967946864454905987931636889230098793127736178215424999229576351482208269895193668033182528869398496465105820939239829488793320362509443117301238197068416140397019837679320683282376464804295311802328782509819455815301756717361332069811250996181881593041690351598888519345807273866738589422879228499892086805825749"
data(e800)
colors()
colors()[655]
n <- 1:10
prob_n_out_of_n <- factorial(n)/n^{n}
plot(n,prob_n_out_of_n,type="h")
?plot
?plot
title("Probability of All Cells Being Occupied")
